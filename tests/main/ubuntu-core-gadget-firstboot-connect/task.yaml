summary: Ensure that firstboot interface connections work

systems: [ubuntu-core-16-64]

environment:
    SNAP: test-snapd-kernel-module-consumer
    PLUG: kernel-module-control
    SLOT: kernel-module-control

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    . $TESTSLIB/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    snap download --edge $SNAP
    unsquashfs /var/lib/snapd/snaps/pc_*.snap
    # fill in firstboot connect
    cat >> squashfs-root/meta/gadget.yaml <<EOF

    connect:
       - $SNAP:$PLUG core:$SLOT
    EOF
    mksquashfs squashfs-root pc_x1.snap -comp xz
    rm -rf squashfs-root
    cp pc_x1.snap /var/lib/snapd/seed/snaps/
    cp ${SNAP}_*.snap /var/lib/snapd/seed/snaps/
    mv /var/lib/snapd/seed/assertions/model model.bak
    cp /var/lib/snapd/seed/seed.yaml seed.yaml.bak
    python3 ./manip_seed.py /var/lib/snapd/seed/seed.yaml ${SNAP}_*.snap
    cp $TESTSLIB/assertions/developer1.account /var/lib/snapd/seed/assertions
    cp $TESTSLIB/assertions/developer1.account-key /var/lib/snapd/seed/assertions
    cp $TESTSLIB/assertions/developer1-pc-w-config.model /var/lib/snapd/seed/assertions
    cp $TESTSLIB/assertions/testrootorg-store.account-key /var/lib/snapd/seed/assertions
    cp ${SNAP}_*.assert /var/lib/snapd/seed/assertions
    # kick first boot again
    systemctl start snapd.service snapd.socket
restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    . $TESTSLIB/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json

    if systemctl status snap-pc-x1.mount ; then
       systemctl stop snap-pc-x1.mount
       rm -f /etc/systemd/system/snap-pc-x1.mount
       rm -f /etc/systemd/system/multi-user.target.wants/snap-pc-x1.mount
       rm -f /var/lib/snapd/snaps/pc_x1.snap
       systemctl daemon-reload
    fi
    rm /var/lib/snapd/seed/snaps/pc_x1.snap

    TEST_REVNO=$(awk "/^snap-revision: / {print \$2}" ${SNAP}_*.assert)
    if systemctl status snap-${SNAP}-${TEST_REVNO}.mount ; then
       systemctl stop snap-${SNAP}-${TEST_REVNO}.mount
       rm -f /etc/systemd/system/snap-${SNAP}-${TEST_REVNO}.mount
       rm -f /etc/systemd/system/multi-user.target.wants/snap-${SNAP}-${TEST_REVNO}.mount
       rm -f /var/lib/snapd/snaps/${SNAP}_*.snap
       systemctl daemon-reload
    fi
    rm /var/lib/snapd/seed/snaps/${SNAP}_*.snap

    cp seed.yaml.bak /var/lib/snapd/seed/seed.yaml
    rm /var/lib/snapd/seed/assertions/developer1.account
    rm /var/lib/snapd/seed/assertions/developer1.account-key
    rm /var/lib/snapd/seed/assertions/developer1-pc-w-config.model
    rm /var/lib/snapd/seed/assertions/testrootorg-store.account-key
    rm /var/lib/snapd/seed/assertions/${SNAP}_*.assert
    cp model.bak /var/lib/snapd/seed/assertions/model
    rm -f *.bak
    # kick first boot again
    systemctl start snapd.service snapd.socket
    # wait for first boot to be done
    for i in $(seq 120); do
        if snap changes | grep -q "Done.*Initialize system state"; then
            break
        fi
        sleep 1
    done
    snap changes | grep -q "Done.*Initialize system state"
execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    echo "Wait for first boot to be done"
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
    echo "We have a model assertion"
    snap known model|MATCH "model: my-model-w-config"

    CONNECTED_PATTERN=":$PLUG +.*$SNAP"
    echo "The snap is connected"
    snap interfaces | MATCH "$CONNECTED_PATTERN"
    