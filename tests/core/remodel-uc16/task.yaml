summary: Test a remodel that switches UC16 -> UC18
environment:
    # core -> core18 transition
    OLD_BASE: core
    NEW_BASE: core18
    # kernel just switches tracks
    KERNEL: pc-kernel

systems: [ubuntu-core-16-64]

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    mv /var/lib/snapd/seed/assertions/model model.bak
    cp "$TESTSLIB"/assertions/developer1.account /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1.account-key /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1-pc.model /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/testrootorg-store.account-key /var/lib/snapd/seed/assertions
    # kick first boot again
    systemctl start snapd.service snapd.socket
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    rm -f /var/lib/snapd/seed/assertions/developer1.account
    rm -f /var/lib/snapd/seed/assertions/developer1.account-key
    rm -f /var/lib/snapd/seed/assertions/developer1-pc.model
    rm -f /var/lib/snapd/seed/assertions/testrootorg-store.account-key
    cp model.bak /var/lib/snapd/seed/assertions/model
    rm -f ./*.bak
    # kick first boot again
    systemctl start snapd.service snapd.socket
    # wait for first boot to be done
    snap wait system seed.loaded
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
    # extra paranoia because failure to cleanup earlier took us a long time
    # to find
    if [ -e /var/snap/$NEW_BASE/current ]; then
        echo "Leftover $NEW_BASE data dir found, test does not "
        echo "properly cleanup"
        echo "see https://github.com/snapcore/snapd/pull/6620"
        echo
        find /var/snap
        exit 1
    fi
execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/boot.sh
    . "$TESTSLIB"/boot.sh
    wait_change_done() {
        chg_summary="$1"
        for _ in $(seq 10); do
            if snap changes | grep -qE "[0-9]+\ +Done\ +.* $chg_summary"; then
                break
            fi
            # some debug output
            snap changes
            # wait a bit
            sleep 5
        done
        snap changes | MATCH "$chg_summary"
    }
    # initial boot with the current model 
    if [ "$SPREAD_REBOOT" = 0 ]; then
        # sanity check
        snap list "$OLD_BASE"
    
        echo "We have the right model assertion"
        snap debug model|MATCH "model: my-model"
        echo "Now we remodel"
        snap remodel --no-wait "$TESTSLIB"/assertions/developer1-pc-18.model
        retry-tool --wait 30 -n 20 test -e /run/systemd/shutdown/scheduled
        
        echo "Double check that we boot into the right kernel"
        bootenv | MATCH "snap_try_kernel=$KERNEL"
        echo "reboot to finish the change"
        REBOOT
    fi
    # first boot with the new base
    if [ "$SPREAD_REBOOT" = 1 ]; then
        # wait for the new base
        retry-tool --wait 30 -n 20 test -e /run/systemd/shutdown/scheduled

        echo "The kernel was tried and is now good"
        bootenv | MATCH "^snap_try_kernel=$"
        echo "And now we try the new base"
        bootenv | MATCH "^snap_try_core=$NEW_BASE"

        REBOOT
    fi
    # second boot with the new kernel 
    if [ "$SPREAD_REBOOT" = 2 ]; then
        # wait for the new pc gadget
        retry-tool --wait 30 -n 20 test -e /run/systemd/shutdown/scheduled

        echo "The base was tried and is now good"
        bootenv | MATCH "^snap_try_core=$"
        echo "And the kernel keeps being good"
        bootenv | MATCH "^snap_try_kernel=$"

        REBOOT
    fi

    # third reboot because of pc gadget - now we are done with the remodel
    if [ "$SPREAD_REBOOT" = 3 ]; then
        wait_core_post_boot
        snap list

        echo "we are using the 18 kernel"
        snap info pc-kernel | MATCH "tracking:.*18/stable"
        
        echo "we got the new model assertion"
        wait_change_done "Refresh model assertion from revision 0 to 2"
        snap debug model|MATCH "revision: 2"

        # XXX: at this point we cannot go back yet because we have no
        # serial anymore and the store won't let us remodel
        
        echo "And we can remodel back again"
        snap remodel --no-wait model.bak
        retry-tool --wait 30 -n 20 test -e /run/systemd/shutdown/scheduled
        
        REBOOT
    fi
    # reboot from new model to undo the new model again (to not pollute tests)
    # first boot for "old" kernel
    if [ "$SPREAD_REBOOT" = 4 ]; then
        retry-tool --wait 30 -n 20 test -e /run/systemd/shutdown/scheduled
        bootenv
        
        REBOOT
    fi
    # reboot from new model to undo the new model again (to not pollute tests)
    # second boot to go back to the "old" core
    if [ "$SPREAD_REBOOT" = 5 ]; then
        retry-tool --wait 30 -n 20 test -e /run/systemd/shutdown/scheduled
        bootenv

        echo "done"
    fi
    # reboot from new model to undo the new model again (to not pollute tests)
    # second boot to go back to the "old" core
    if [ "$SPREAD_REBOOT" = 6 ]; then
        wait_core_post_boot
        bootenv

        # we will need to uninstall the snapd snap, wonder if that works
        snap remove snapd
        echo "done"
    fi
